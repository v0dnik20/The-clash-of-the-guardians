#include <stdio.h>
#include <stdlib.h>
#include <time.h>

struct guardian
{
    char nombreguardian[50];
    char tipo[50];
    int pv;
    int pa;
    int pd;
    int codigocarta;

};

struct player
{
    char nombreplayer[50];
    int puntosdevida;
    struct guardian cartas[15];
};

int main()
{
    //guardianes
    FILE *txtguardian;
    txtguardian = fopen("txtguardian.txt", "r");
    if (txtguardian == NULL)
    {
        printf("Error al abrir el archivo ''guardian.txt''\n");
        system("pause");
        return 1;
    }
    struct guardian guardianes[60];
    int records = 0;
    int i=1;
    while (fscanf(txtguardian, "%50[^,],%50[^,],%d,%d,%d\n",
                  guardianes[records].nombreguardian,
                  guardianes[records].tipo,
                  &guardianes[records].pv,
                  &guardianes[records].pa,
                  &guardianes[records].pd) == 5)      
    {
        guardianes[records].codigocarta=i;
        records++;
        i++;
    }
    fclose(txtguardian);
    //jugadores (player y cpu)
    FILE*txtplayers;
    txtplayers = fopen("txtplayers.txt", "r");
    if (txtplayers == NULL)
    {
        printf("Error al abrir el archivo ''players.txt''\n");
        system("pause");
        return 1;
    }
    struct player players[2];
    int cplayers = 0;
    while (fscanf(txtplayers, "%50[^,],%d\n",
                  players[cplayers].nombreplayer,
                  &players[cplayers].puntosdevida) == 2)      
    {
        cplayers++;
    }
    
    fclose(txtplayers);

    //repartir las cartas
    int j;
    for (i=0;i<2;i++)
    {
        for (j=0;j<15;j++)
        {
            int randcarta;
            do
            {
                randcarta = rand() % 60;
            }
            while(guardianes[randcarta].codigocarta <0);

            // carta del player
            players[i].cartas[j] = guardianes[randcarta];

            // carta marcada para que no se repita
            guardianes[randcarta].codigocarta = guardianes[randcarta].codigocarta*-1;
        }
    }
    
    
    
    //  MENU
    int iplayers;
    int menuseleccion;
    do {
        printf("BIENVENIDO AL MENU DE \n'THE CLASH OF THE GUARDIANS'\n\n");
        printf("Para mostrar los jugadores, digite 1.\n");
        printf("Para mostrar los guardianes, digite 2.\n");
        printf("Para mostrar las cartas del player, digite 3.\n");
        printf("Para salir, digite 0.\n");
        scanf("%d", &menuseleccion);
        system("cls");

        switch (menuseleccion) {
            case 1:
                // Imprime los players del archivo
                printf("PLAYERS:\n");
                for (iplayers = 1; iplayers <= cplayers; iplayers++)
                  {
                     printf("Nombre player%d: %s \n",iplayers, players[iplayers].nombreplayer);
                     printf("Vida player%d: %d\n\n",iplayers, players[iplayers].puntosdevida);
                  }
                system("pause");
                system("cls");
                break;
            case 2:
                // Imprime las cartas del archivo
                for (i = 1; i <= records; i++)
                {
                     printf("Codigo de la carta: %d \n",guardianes[i-1].codigocarta);
                     printf("nombre: %s \n", guardianes[i-1].nombreguardian);
                     printf("tipo: %s \n", guardianes[i-1].tipo);
                     printf("PV: %d \n", guardianes[i-1].pv);
                     printf("PA: %d \n", guardianes[i-1].pa);
                     printf("PD: %d\n\n", guardianes[i-1].pd);
                }
                printf("TODAS LAS CARTAS EN LAS QUE SU NUMERO DE CARTA SE ESCUENTRE EN NEGATIVO SIGNIFICA QUE YA FUE ASIGNADA A UN JUGADOR, PERO EL NUMERO DE ESTA SIGUE SIENDO EL MISMO SOLO QUE EN NEGATIVO");
                system("pause");
                system("cls");
                break;
            case 3:
                 //imprime las 15 cartas asignadas aleatoriamente a cada player
                for (i = 0; i < 2; i++)
                {
                    printf("Cartas asignadas al jugador %s:\n\n", players[i].nombreplayer);
                    for (j = 0; j < 15; j++)
                    {
                        printf("Carta %d: \n", j + 1);
                        printf("Codigo de la carta: %d\n", players[i].cartas[j].codigocarta);
                        printf("Nombre: %s\n", players[i].cartas[j].nombreguardian);
                        printf("Tipo: %s\n", players[i].cartas[j].tipo);
                        printf("PV: %d\n", players[i].cartas[j].pv);
                        printf("PA: %d\n", players[i].cartas[j].pa);
                        printf("PD: %d\n\n", players[i].cartas[j].pd);
                    }
                    printf("\n");
                }
                system("pause");
                system("cls");
                 break;
            case 0:
                printf("Â¡Hasta luego!\n");
                break;
            default:
                printf("Opcion invalida. Por favor, ingrese 1, 2 o 0.\n");
                system("pause");
                system("cls");
        }
    } while (menuseleccion != 0);

    system("pause");
    return 0;
}
